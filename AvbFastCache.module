<?php

/**
 * Class AvbFastCache
 *
 * @author          : İskender TOTOĞLU, @ukyo (community), @trk (Github)
 * @website         : http://altivebir.com.tr
 * @projectWebsite  : https://github.com/trk/AvbFastCache
 */
class AvbFastCache extends WireData implements Module, ConfigurableModule {

    const FastCacheVersion = '3.0.6';

    public $fastcache;
    private $cachePath = "";

    /**
     * Default configurations
     *
     * @return array
     */
    static public function getDefaultData() {
        return array(
            'cacheExpireTime' => '1',
            'storage' => 'auto', // auto, files, sqlite, apc, cookie, memcache, memcached, predis, redis, wincache, xcache
            'securityKey' => 'auto', // auto will use domain name, set it to 1 string if you use alias domain name
            'redis_host' => '127.0.0.1',
            'redis_port' => '',
            'redis_password' => '',
            'redis_database' => '',
            'redis_timeout' => '',
            'fallback' => 'files',
            'pw_cache_prefix' => 'cache_'
        );
    }

    /**
     * Module Info
     *
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'AvbFastCache Module',
            'summary' => __('Allow to use "phpfastcache" or "WireCache" Library with ProcessWire'),
            'version' => 2,
            'author' => 'İskender TOTOĞLU | @ukyo(community), @trk (Github), http://altivebir.com.tr',
            'href' => 'https://github.com/trk/AvbFastCache',
            'icon' => 'clock-o',
            'singular' => true,
            'autoload' => false,
            'requires' => 'ProcessWire>=2.6'
        );
    }

    public function __construct() {
        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
        $this->cachePath = wire('config')->paths->assets . 'AvbFastCache/';
    }

    /**
     * Initialize the module
     *
     */
    public function init() {
        if(!file_exists($this->cachePath)) $this->___install();

        if($this->storage === 'WireCache') {
            $this->fastcache = wire('cache');
        } else {
            $this->pages->addHookAfter('save', $this, '_setSavePageModifiedData');

            // phpFastCache Library
            require_once(__DIR__."/Libraries/phpfastcache/3.0.0/phpfastcache.php");

            phpFastCache::$config = array(
                "storage"   =>  $this->storage, // auto, files, sqlite, apc, cookie, memcache, memcached, predis, redis, wincache, xcache
                "default_chmod" => 0777, // For security, please use 0666 for module and 0644 for cgi.
                // create .htaccess to protect cache folder
                // By default the cache folder will try to create itself outside your public_html.
                // However an htaccess also created in case.
                "htaccess"      => true,
                // path to cache folder, leave it blank for auto detect
                "path"      =>  $this->cachePath,
                "securityKey"   =>  "auto", // auto will use domain name, set it to 1 string if you use alias domain name
                // MEMCACHE
                "memcache"        =>  array(
                    array("127.0.0.1",11211,1),
                    //  array("new.host.ip",11211,1),
                ),
                // REDIS
                "redis"         =>  array(
                    "host"  => $this->redis_host,
                    "port"  =>  $this->redis_port,
                    "password"  =>  $this->redis_password,
                    "database"  =>  $this->redis_database,
                    "timeout"   =>  $this->redis_timeout
                ),
                "extensions"    =>  array(),
                // Fall back when old driver is not support
                "fallback"  => $this->fallback,
            );

            // temporary disabled phpFastCache
            phpFastCache::$disabled = false;

            $this->fastcache = phpFastCache();
        }
    }

    /**
     * Set Page & Page Children & Page Template Modified data to cache after page save
     *
     */
    public function _setSavePageModifiedData($event) {
        $page = $event->arguments[0];
        $this->getSetModified($page);
    }

    /**
     * Get or Set cache data
     *
     * @param $keyword
     * @param null $func
     * @return mixed|string
     */
    public function getSet($keyword, $func = null) {
        if($this->storage === 'WireCache' || $this->storage === 'sqlite') {
            $keyword = $keyword;
            $expire = $this->cacheExpireTime;
            return wire('cache')->get($keyword, $expire, $func);
        } else {
            $cacheData = $this->fastcache->get($keyword);
            if(is_null($cacheData)) {
                if(!is_null($func)) {
                    // If there is a old cache data clear database record
                    $this->cleanWireCacheItem($this->pw_cache_prefix . $keyword);
                    // Create new database cache record
                    $value = wire('cache')->get($this->pw_cache_prefix . $keyword, $this->cacheExpireTime, $func);
                    if($value !== false) {
                        $this->fastcache->set($keyword, $value, $this->cacheExpireTime);
                        $cacheData = $value;
                    }
                }
            }
            return $cacheData;
        }
    }

    public function setCache($keyword, $value = "", $time = 0, $option = array()) {
        return $this->fastcache->set($keyword, $value, $time, $option);
    }

    public function getCache($keyword, $option = array()) {
        return $this->fastcache->get($keyword, $option);
    }

    function getInfo($keyword, $option = array()) {
        return $this->fastcache->getInfo($keyword, $option);
    }

    function delete($keyword, $option = array()) {
        return $this->fastcache->delete($keyword,$option);
    }

    function stats($option = array()) {
        return $this->fastcache->stats($option);
    }

    function clean($option = array()) {
        return $this->fastcache->clean($option);
    }

    function isExisting($keyword) {
        return $this->fastcache->isExisting($keyword);
    }

    // todo: search
    function search($query) {
        return $this->fastcache->search($query);
    }

    function increment($keyword, $step = 1 , $option = array()) {
        return $this->fastcache->increment($keyword, $step, $option);
    }

    function decrement($keyword, $step = 1 , $option = array()) {
        return $this->fastcache->decrement($keyword, $step, $option);
    }

    function touch($keyword, $time = 300, $option = array()) {
        return $this->fastcache->touch($keyword, $time, $option);
    }

    public function setMulti($list = array()) {
        $this->fastcache->setMulti($list);
    }

    public function getMulti($list = array()) {
        return $this->fastcache->getMulti($list);
    }

    public function getInfoMulti($list = array()) {
        return $this->fastcache->getInfoMulti($list);
    }

    public function deleteMulti($list = array()) {
        $this->fastcache->deleteMulti($list);
    }

    public function isExistingMulti($list = array()) {
        return $this->fastcache->isExistingMulti($list);
    }

    public function incrementMulti($list = array()) {
        return $this->fastcache->incrementMulti($list);
    }

    public function decrementMulti($list = array()) {
        return $this->fastcache->decrementMulti($list);
    }

    public function touchMulti($list = array()) {
        return $this->fastcache->touchMulti($list);
    }

    public function setup($config_name,$value = "") {
        $this->fastcache->setup($config_name, $value);
    }

    /*
    function __get($name) {
        return $this->fastcache->__get($name);
    }

    function __set($name, $v) {
        return $this->fastcache->__set($name, $v);
    }

    public function __call($name, $args) {
        return $this->fastcache->__call($name, $args);
    }
    */

    public function getPath($create_path = false) {
        return $this->fastcache->getPath($create_path);
    }

    public function systemInfo() {
        return $this->fastcache->systemInfo();
    }

    /**
     * Set Modified Data
     *
     * @param $page
     * @return array
     */
    protected function getSetModified($page) {
        if(isset($page)) {
            $pageName = "page_{$page->id}";
            $templateName = "template_{$page->template}";

            $_cdata = array(
                $pageName => $this->fastcache->get($pageName),
                $templateName => $this->fastcache->get($templateName)
            );

            if(is_null($_cdata) || $_cdata[$pageName]['modified'] != $page->modified) {
                $data = array(
                    'modified' => $page->modified,
                );

                if($page->numChildren > 0) {
                    $data['child_modified'] = $this->getLastModified($page->id, true);
                }

                $this->fastcache->set($pageName, $data, 0);
                $this->fastcache->set($templateName, array('modified' => $page->modified), 0);

                return array(
                    $pageName => $this->fastcache->get($pageName),
                    $templateName => $this->fastcache->get($templateName)
                );
            }
        }
        return "";
    }

    /**
     * Get Modified Information
     *
     * @param $page
     * @param string $key
     * @return string
     */
    protected function getModified($page, $key="") {
        if(isset($page)) {
            $modified = $this->getSetModified($page);
            if($key == 'page' && isset($modified[$key . $page->id]['modified'])) return $modified[$key . $page->id]['modified'];
            if($key == 'page_child' && isset($modified[$key . $page->id]['modified'])) return $modified[$key . $page->id]['child_modified'];
        }
        return "";
    }

    /**
     * Get last modified page modified date from given $id, $parent_id, $templates_id or from all
     *
     * @param bool $id
     * @param bool $parent_id
     * @param bool $templates_id
     * @return mixed|string
     */
    public function getLastModified($id=false, $parent_id=false, $templates_id=false) {
        if(!is_null($id)) {
            $where = "";
            if(is_bool($id) != true) {
                $where = " WHERE";
                $where .= ($parent_id) ? " parent_id = {$id}" : " id={$id}";
                $where .= ($templates_id) ? " AND templates_id = {$templates_id}" : "";
            }
            $results = wire('db')->query("SELECT MAX(modified) as modified FROM pages{$where}");
            if($results->num_rows > 0) {
                $result = $results->fetch_assoc();
                $search = array(' ', '-', ':');
                $replace = array('', '', '');
                return str_replace($search, $replace, $result['modified']);
            }
        }
        return "";
    }

    /**
     * Get total cached file size and number of cached items
     *
     * @param null $path
     * @return array
     */
    protected function getCachedDataInfo($path=null) {
        if(is_null($path)) $path = $this->cachePath;

        $items = new RecursiveDirectoryIterator($path);

        $bytestotal=0;
        $nbfiles=0;
        foreach (new RecursiveIteratorIterator($items) as $filename => $file) {
            $filesize = $file->getSize();
            $bytestotal += $filesize;
            $nbfiles++;
        }

        $label  = array('B', 'KB', 'MB', 'GB', 'TB', 'PB');
        for ($i = 0; $bytestotal >= 1024 AND $i < (count($label) - 1); $bytestotal /= 1024, $i++);

        return array(
            'nbfiles' => number_format($nbfiles),
            'bytestotal' => round($bytestotal) . ' ' .$label[$i]
        );
    }

    /**
     * Clear Cache DB Data for given prefix name if like or not like
     *
     * @param string $prefix
     */
    protected function cleanPwDbCache($prefix="") {
        if($prefix != "") { wire('db')->query("DELETE FROM caches where Name LIKE '{$prefix}%'"); }
        return;
    }

    /**
     * Clear Cache DB Data for given prefix name if like or not like
     *
     * @param string $keyword
     */
    protected function cleanWireCacheItem($keyword) {
        if($keyword != "") { wire('db')->query("DELETE FROM caches WHERE Name='{$keyword}'"); }
        return;
    }

    /**
     * Module configuration
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    public function getModuleConfigInputfields(array $data) {

        if(wire('input')->post->clearCache && wire('input')->post->clearCache == 'clean') {
            if($this->storage === 'WireCache') {
                $this->cleanPwDbCache($this->pw_cache_prefix);
            } else {
                $this->fastcache->clean();
            }
            $this->message(__('Cache data cleared.'));
        }

        $fields = new InputfieldWrapper();
        $modules = wire('modules');
        $data = array_merge(self::getDefaultData(), $data);

        // Cmod
        $field = $modules->get("InputfieldInteger");
        $field->columnWidth = 50;
        $field->name = "cacheExpireTime";
        $field->label = __("Cache expire time");
        $field->notes = __("For example: 0 = Unlimited, 1 = 1 second, 60 = 1 minute, 600 = 10 minutes, 3600 = 1 hour, 86400 = 1 day, 604800 = 1 week, 2419200 = 1 month.");
        $field->attr('min', 0);
        $field->attr('type', 'number');
        $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fields->add($field);

        $cachedData = $this->getCachedDataInfo();

        // Form Container for Clear all cache data
        $form = $modules->get("InputfieldForm");
        $form->columnWidth = 50;
        $form->icon = "trash";

        $field = $modules->get("InputfieldMarkup");
        $field->label = __("Cache control");
        $field->description = sprintf(__('Total cached files: %s, Used space: %s'), $cachedData['nbfiles'], $cachedData['bytestotal']);
        $form->add($field);

        // Hidden Form Field
        $hidden = $modules->get("InputfieldHidden");
        $hidden->name = "clearCache";
        $hidden->value = "clean";
        $field->add($hidden);

        // Submit button for Clear cache data form
        $submit = $modules->get("InputfieldSubmit");
        $submit->value = __("Clear cache");
        $field->add($submit);
        $form->add($field);

        $fields->add($form);

        // Storage
        $field = $modules->get("InputfieldSelect");
        $field->name = "storage";
        $field->label = __("Storage");
        $field->notes = __("auto, files, sqlite, apc, cookie, memcache, memcached, predis, redis, wincache, xcache");
        $field->required = true;
        $field->addOptions(array(
            'auto' => 'auto',
            'WireCache' => 'WireCache',
            'files' => 'files',
            'sqlite' => 'sqlite',
            'apc' => 'apc',
            'cookie' => 'cookie',
            'memcache' => 'memcache',
            'memcached' => 'memcached',
            'predis' => 'predis',
            'redis' => 'redis',
            'wincache' => 'wincache',
            'xcache' => 'xcache'
        ));
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fields->add($field);

        // Security Key
        $field = $modules->get("InputfieldText");
        $field->name = "pw_cache_prefix";
        $field->label = __("ProcessWire DB Cache prefix");
        $field->description = __("Cache prefix will be added to your cache keyword, ex.: your cache keyword is 'Header' and with prefix your cache keyword will be 'YourCachePrefixHeader'. Cache prefix is important for clear cache data from database and don't use 'Modules' as cache prefix !");
        $field->notes = __("Don't use cache prefix, starting with 'Modules', if you you, you can lost your 'Modules' cache data.");
        $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fields->add($field);


        // Security Key
        $field = $modules->get("InputfieldText");
        $field->name = "securityKey";
        $field->label = __("Security Key");
        $field->notes = __("auto will use domain name, set it to 1 string if you use alias domain name");
        $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fields->add($field);

        // Fallback
        $field = $modules->get("InputfieldText");
        $field->name = "fallback";
        $field->label = __("Fallback");
        $field->required = true;
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fields->add($field);

        // Redis Options
        $fieldset = $modules->get("InputfieldFieldset");
        $fieldset->label = __("Redis Connection Settings");
        $fieldset->icon = "cog";
        $fieldset->collapsed = true;
        $fields->add($fieldset);

        // Redis Host
        $field = $modules->get("InputfieldText");
        $field->name = "redis_host";
        $field->label = __("Host");
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fieldset->add($field);

        // Redis Port
        $field = $modules->get("InputfieldText");
        $field->name = "redis_port";
        $field->label = __("Port");
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fieldset->add($field);

        // Redis Password
        $field = $modules->get("InputfieldText");
        $field->name = "redis_password";
        $field->label = __("Password");
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fieldset->add($field);

        // Redis Database
        $field = $modules->get("InputfieldText");
        $field->name = "redis_database";
        $field->label = __("Database");
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fieldset->add($field);

        // Redis Timeout
        $field = $modules->get("InputfieldText");
        $field->name = "redis_timeout";
        $field->label = __("Timeout");
        if (isset($data[$field->name])) $field->value = $data[$field->name];
        $fieldset->add($field);

        return $fields;
    }

    protected function ___install() {
        if(!is_dir($this->cachePath)) @mkdir($this->cachePath, 0777);
    }

    protected function ___uninstall() {
        $this->removeCacheDir($this->cachePath);
    }

    protected function removeCacheDir($dir) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (filetype($dir."/".$object) == "dir")
                        $this->removeCacheDir($dir."/".$object);
                    else unlink   ($dir."/".$object);
                }
            }
            reset($objects);
            rmdir($dir);
        }
    }
}